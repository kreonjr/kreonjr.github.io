{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","carData","setCarData","categories","setCategories","selectedCylinders","setSelectedCylinders","showBackToOverview","setShowBackToOverview","useEffect","populateData","document","addEventListener","removeEventListener","plotOverview","d3","selectAll","remove","plotCylinderGraph","a","vehicleInfo","newCategories","forEach","vehicle","includes","push","sort","b","getAvgMPG","entry","Number","AverageHighwayMPG","AverageCityMPG","uniqueMakes","d","Make","y","domain","range","x","padding","append","attr","call","style","text","data","filter","EngineCylinders","enter","s","find","avgMPGData","map","avgMPGForMake","reduce","prev","cur","length","bandwidth","avgMPGForCylinder","on","e","ticks","className","cat","onClick","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.545a1712.chunk.js","sourcesContent":["import './App.css';\nimport * as d3 from \"d3\"\nimport {useState, useEffect} from \"react\"\n\nfunction App() {\n  const [carData, setCarData] = useState([])\n  const [categories, setCategories] = useState([])\n  const [selectedCylinders, setSelectedCylinders] = useState(null)\n  const [showBackToOverview, setShowBackToOverview] = useState(false)\n\n  useEffect(() => {\n    populateData()\n    document.addEventListener('click', () => setSelectedCylinders(null), true);\n    return () => {\n        document.removeEventListener('click', () => setSelectedCylinders(null), true);\n    };\n  }, [])\n\n  useEffect(() =>{\n    plotOverview()\n  },[carData,categories])\n\n  useEffect(() => {\n    d3.select(\"svg\").selectAll(\"*\").remove();\n    if(showBackToOverview) {\n      plotCylinderGraph()\n    } else {\n      plotOverview()\n      setSelectedCylinders(null)\n    }\n  },[showBackToOverview])\n\n  useEffect(() => {\n    if(showBackToOverview) {\n      d3.select(\"svg\").selectAll(\"*\").remove();\n      plotCylinderGraph()\n    } else {\n      plotOverview()\n    }\n  }, [selectedCylinders])\n\n\n  const populateData = async () => {\n    const vehicleInfo = await d3.csv(\"https://flunky.github.io/cars2017.csv\")\n    let newCategories = []\n    vehicleInfo.forEach((vehicle) => {\n      if(!newCategories.includes(vehicle[\"EngineCylinders\"])) {\n        newCategories.push(vehicle[\"EngineCylinders\"])\n      }\n    })\n    newCategories.sort((a,b) => a - b)\n\n    setCarData(vehicleInfo)\n    setCategories(newCategories)\n  }\n\n  const getAvgMPG = (entry) => {\n        return (Number(entry.AverageHighwayMPG) + Number(entry.AverageCityMPG)) / 2\n  }\n\n  const plotCylinderGraph = () => {\n    let uniqueMakes = []\n    carData.forEach((d) => {\n      if(!uniqueMakes.includes(d.Make)) {\n        uniqueMakes.push(d.Make)\n      }\n    })\n\n    const y = d3.scaleLinear().domain([0,150]).range([500,0]) //Max MPG 150\n    const x = d3.scaleBand().domain(uniqueMakes).range([0,500]).padding(0.2) // Max Cylinders 12\n    \n    //Axes \n    d3.select(\"svg\").append(\"g\").attr(\"transform\", \"translate(50,50)\").call(d3.axisLeft(y))\n    .append(\"text\")\n    .attr(\"font-size\", 15)\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", 6)\n    .attr(\"dy\", \".71em\")\n    .attr(\"fill\", \"#999\")\n    .style(\"text-anchor\", \"end\")\n    .text(\"Average MPG\");\n\n    d3.select(\"svg\").append(\"g\").attr(\"transform\", \"translate(50,550)\").call(d3.axisBottom(x))\n    .selectAll(\"text\")\n    .attr(\"y\", 0)\n    .attr(\"x\", 9)\n    .attr(\"dy\", \".35em\")\n    .attr(\"transform\", \"rotate(90)\")\n    .style(\"text-anchor\", \"start\")\n\n    var tooltip = d3.select(\"body\")\n    .append(\"div\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .style(\"background\", \"#000\")\n    .text(\"a simple tooltip\");\n\n    // Data\n    d3.select(\"svg\").append('g')\n    .selectAll(\"rect\")\n    .data(carData.filter((d) => d.EngineCylinders === selectedCylinders))\n    .enter()\n    .append('rect')\n    .attr('x', (s) => x(uniqueMakes.find((d) => d === s.Make)))\n    .attr(\"y\", function (s) {\n      let allDataForMake = carData.filter((d) => d.Make === s.Make)\n      let avgMPGData = allDataForMake.map((d) => getAvgMPG(d))\n      let avgMPGForMake = avgMPGData.reduce((prev, cur) => {\n        return prev + cur\n      }, 0)\n      return 550 - y((avgMPGForMake / avgMPGData.length))\n    } )\n    .attr('height', function (s) {\n      let allDataForMake = carData.filter((d) => d.Make === s.Make)\n      let avgMPGData = allDataForMake.map((d) => getAvgMPG(d))\n      let avgMPGForMake = avgMPGData.reduce((prev, cur) => {\n        return prev + cur\n      }, 0)\n      return y(avgMPGForMake / avgMPGData.length)\n    } )\n    .attr('width', x.bandwidth())\n    .attr(\"fill\", \"#fe9922\")\n    .attr(\"transform\", \"translate(50,0)\")\n\n  }\n\n\n  \n  const plotOverview = () => {\n    const y = d3.scaleLinear().domain([0,150]).range([500,0]) //Max MPG 150\n    const x = d3.scaleLinear().domain([0,12]).range([0,500]) // Max Cylinders 12\n\n    let tooltip = d3.select(\"body\")\n    .append(\"div\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .style(\"background\", \"#000\")\n    .text(\"a simple tooltip\");\n\n    d3.select(\"svg\").append('g')\n    .selectAll(\"dot\")\n    .data(carData)\n    .enter()\n    .append(\"circle\")\n    .attr(\"transform\", \"translate(50,0)\")\n      .attr(\"cx\", function (d) { return x(Number(d.EngineCylinders) )} )\n      .attr(\"cy\", function (s) {\n        let allDataForCylinder = carData.filter((d) => d.EngineCylinders === s.EngineCylinders)\n        let avgMPGData = allDataForCylinder.map((d) => getAvgMPG(d))\n        let avgMPGForCylinder = avgMPGData.reduce((prev, cur) => {\n          return prev + cur\n        }, 0)\n        return y(avgMPGForCylinder / avgMPGData.length)\n      } )\n      .attr(\"r\", 8)\n      .style(\"fill\", (d) => {\n        if(!selectedCylinders) {\n          return \"#69b3a2\"\n        }\n        else if(selectedCylinders === d.EngineCylinders) {\n          return \"red\"\n        } else {\n          return \"lightgray\"\n        }\n      })\n      .on(\"click\", function(e,d){\n        setSelectedCylinders(d.EngineCylinders)\n        setShowBackToOverview(true)\n      });\n\n\n    //Axes \n    d3.select(\"svg\").append(\"g\").attr(\"transform\", \"translate(50,50)\").call(d3.axisLeft(y))\n    .append(\"text\")\n    .attr(\"font-size\", 15)\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", 6)\n    .attr(\"dy\", \".71em\")\n    .attr(\"fill\", \"#999\")\n    .style(\"text-anchor\", \"end\")\n    .text(\"Average MPG\");\n\n    d3.select(\"svg\").append(\"g\").attr(\"transform\", \"translate(50,550)\").call(d3.axisBottom(x).ticks(5))\n    .append(\"text\")\n    .attr(\"font-size\", 15)\n    .attr(\"x\", 500)\n    .attr(\"y\", -6)\n    .attr(\"dx\", \".5em\")\n    .attr(\"fill\", \"#999\")\n    .style(\"text-anchor\", \"end\")\n    .text(\"Cylinders\");\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Fuel Efficiency per Cylinder 2007</h1>\n      <div className=\"SlideSelector\">\n      Choose a number of Cylinders to highlight\n      <div className=\"ButtonContainer\">\n        {categories.map((cat) => {\n          return <button onClick={() => {\n            setSelectedCylinders(cat)\n          }} key={cat} className=\"CategoryButton\">{cat}</button>\n        })}\n      </div>\n      {showBackToOverview &&  <button onClick={() => {\n        setShowBackToOverview(false)\n        setSelectedCylinders(null)\n      }} className=\"BackButton\">Back to Overview</button>}\n      {!showBackToOverview && <div>Select a data point to see Vehicle Make Specific info</div>}\n      </div>\n      <div className=\"PlotContainer\">\n      <svg className=\"SVG\" width={600} height={600}></svg>\n      {!selectedCylinders ? \"Overall\" : `${selectedCylinders} cylinders`}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}